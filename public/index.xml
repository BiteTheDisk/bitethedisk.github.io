<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BiteTheDisk 小站</title>
    <link>https://bitethedisk.github.io/</link>
    <description>Recent content on BiteTheDisk 小站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 01 Aug 2023 21:31:27 +0800</lastBuildDate><atom:link href="https://bitethedisk.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rust 和 C 的交互</title>
      <link>https://bitethedisk.github.io/post/rust-and-c/</link>
      <pubDate>Tue, 01 Aug 2023 21:31:27 +0800</pubDate>
      
      <guid>https://bitethedisk.github.io/post/rust-and-c/</guid>
      <description></description>
    </item>
    
    <item>
      <title>信号处理</title>
      <link>https://bitethedisk.github.io/post/signal/</link>
      <pubDate>Tue, 01 Aug 2023 21:17:37 +0800</pubDate>
      
      <guid>https://bitethedisk.github.io/post/signal/</guid>
      <description></description>
    </item>
    
    <item>
      <title>[全国赛I] busybox 预加载</title>
      <link>https://bitethedisk.github.io/post/busybox-pre-init/</link>
      <pubDate>Tue, 01 Aug 2023 18:37:11 +0800</pubDate>
      
      <guid>https://bitethedisk.github.io/post/busybox-pre-init/</guid>
      <description>&lt;p&gt;由于大部分测试需要使用 busybox，为了避免多次解析 elf、从零创建地址空间等问题，我们采用了类似于加载initproc的方法。具体而言，我们将 busybox 预加载到内核中，并保存 load_elf 获取的信息。每次执行busybox时，我们直接使用保存的 load_elf 信息，并通过写时拷贝来创建所需的 busybox 进程的地址空间，更快速地创建 busybox 进程从而实现更高效的测试。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[全国赛I] 进程/线程调度</title>
      <link>https://bitethedisk.github.io/post/scheduling/</link>
      <pubDate>Tue, 01 Aug 2023 18:37:11 +0800</pubDate>
      
      <guid>https://bitethedisk.github.io/post/scheduling/</guid>
      <description>&lt;p&gt;在我们的内核中，我们使用 TASKMANAGER 管理分别处于就绪态，阻塞态的进程，包括因为调用 nanosleep 而休眠的进程。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[全国赛I] 进程管理-进程与线程</title>
      <link>https://bitethedisk.github.io/post/process-thread/</link>
      <pubDate>Tue, 01 Aug 2023 18:37:11 +0800</pubDate>
      
      <guid>https://bitethedisk.github.io/post/process-thread/</guid>
      <description>&lt;h3 id=&#34;tcb-与-fork-的更改&#34;&gt;TCB 与 fork 的更改&lt;/h3&gt;
&lt;p&gt;相较于初赛，完善了 clone 系统调用。初赛时由于要求测试样例要求比较低，在实现 clone 系统调用时并未完全利用用户传递的参数。我们根据 Linux manual page 中的要求，完善了内核的 fork 以及 TaskControlBlock 结构。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>适配 OpenSBI</title>
      <link>https://bitethedisk.github.io/post/opensbi-getchar/</link>
      <pubDate>Wed, 12 Jul 2023 17:17:35 +0800</pubDate>
      
      <guid>https://bitethedisk.github.io/post/opensbi-getchar/</guid>
      <description>一开始</description>
    </item>
    
    <item>
      <title>Rust Heap and C</title>
      <link>https://bitethedisk.github.io/post/rust-heap-and-c/</link>
      <pubDate>Fri, 07 Jul 2023 22:35:05 +0800</pubDate>
      
      <guid>https://bitethedisk.github.io/post/rust-heap-and-c/</guid>
      <description>Rust 和 C 交互的时候需要注意 Rust 的堆，当从 Rust 程序 fork 出一个进程 来执行 C 程序的时候，C 是不能识别 Rust 的堆的(包括其堆管理器这些)，所以当 使用 C 程序去访问 fork 后的 Rust 堆上的对象，或者传递相关堆上对象的时候可能 会产生致命</description>
    </item>
    
    <item>
      <title>[全国赛I]项目结构(rust-workspace不能使用)</title>
      <link>https://bitethedisk.github.io/post/project-structure/</link>
      <pubDate>Fri, 30 Jun 2023 19:29:29 +0800</pubDate>
      
      <guid>https://bitethedisk.github.io/post/project-structure/</guid>
      <description>&lt;p&gt;随着开发的进行，我们需要的适配和封装的数据结构越来越多，其中大部分与我们的内核本体关系并没有那么紧密，
所以我们将这部分结构，如用于的引导程序、FAT32、Linux 相关数据结构放在了项目根目录中的 &lt;code&gt;crates&lt;/code&gt; 里&lt;/p&gt;
&lt;p&gt;Rust 本身是支持多个 &lt;code&gt;crates&lt;/code&gt; 构成的一个 &lt;code&gt;workspace&lt;/code&gt;，这些 &lt;code&gt;crates&lt;/code&gt; 直接可以相互引用，但是由于我们使用
了 &lt;code&gt;.cargo/config.toml&lt;/code&gt; 来配置 rustc，所以 &lt;code&gt;workspace&lt;/code&gt; 并不能为我们所有 (因为目前 &lt;code&gt;workspace&lt;/code&gt;
不支持在 &lt;code&gt;workspace&lt;/code&gt; 中读取 &lt;code&gt;.cargo/config.toml&lt;/code&gt;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[区域赛] 有关 BTD 的 Makefile</title>
      <link>https://bitethedisk.github.io/post/about-makefile/</link>
      <pubDate>Fri, 30 Jun 2023 18:37:11 +0800</pubDate>
      
      <guid>https://bitethedisk.github.io/post/about-makefile/</guid>
      <description>&lt;p&gt;项目提供了一系列的 Makefile 来简化开发流程.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>开发中如调试内核</title>
      <link>https://bitethedisk.github.io/post/how-to-debug-the-kernel/</link>
      <pubDate>Fri, 30 Jun 2023 18:34:54 +0800</pubDate>
      
      <guid>https://bitethedisk.github.io/post/how-to-debug-the-kernel/</guid>
      <description>&lt;p&gt;在 BTD 的开发中经常会遇到 debug 的需求，BTD 提供了一个方便的调试流程，只需启动两个 shell 即可
开始调试&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[已解决]内核在执行用户程序时随机卡死</title>
      <link>https://bitethedisk.github.io/post/random-stuck/</link>
      <pubDate>Thu, 29 Jun 2023 21:42:09 +0800</pubDate>
      
      <guid>https://bitethedisk.github.io/post/random-stuck/</guid>
      <description>&lt;p&gt;内核在运行的时候总是会不知何时卡死，底层原因是持续触发时钟中断&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于我们</title>
      <link>https://bitethedisk.github.io/about/</link>
      <pubDate>Sat, 11 Apr 2020 19:15:32 +0800</pubDate>
      
      <guid>https://bitethedisk.github.io/about/</guid>
      <description>BTD OS 是使用 Rust 语言开发的宏内核操作系统，可运行于 RISC-V64 平台，并实现了中断与异常处理、进 程管理、内存管理以及文件系统等操作系统基本模块。目前，BTD OS 支持在 QEMU 虚拟环境中运行。 BTD OS 的总体目标是设计一款简洁小巧、</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BiteTheDisk 小站</title>
    <link>https://bitethedisk.github.io/</link>
    <description>Recent content on BiteTheDisk 小站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <lastBuildDate>Sat, 19 Aug 2023 00:37:29 +0800</lastBuildDate><atom:link href="https://bitethedisk.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Docs] 任务控制块</title>
      <link>https://bitethedisk.github.io/post/task_control_block/</link>
      <pubDate>Sat, 19 Aug 2023 00:37:29 +0800</pubDate>
      
      <guid>https://bitethedisk.github.io/post/task_control_block/</guid>
      <description>&lt;p&gt;应用程序的一次执行过程称为一个任务。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Docs] 系统设计与整体架构</title>
      <link>https://bitethedisk.github.io/post/overall_architecture/</link>
      <pubDate>Sat, 19 Aug 2023 00:33:07 +0800</pubDate>
      
      <guid>https://bitethedisk.github.io/post/overall_architecture/</guid>
      <description>&lt;p&gt;RISC-V架构定义了4种特权级别，其中只有M模式是必须实现的，其余特权级别可以根据运行在CPU上的应用需求进行调整。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Docs] 概述</title>
      <link>https://bitethedisk.github.io/post/overview/</link>
      <pubDate>Sat, 19 Aug 2023 00:30:10 +0800</pubDate>
      
      <guid>https://bitethedisk.github.io/post/overview/</guid>
      <description>&lt;p&gt;BTD-OS是一款基于 Rust 语言开发的宏内核操作系统，适用于 RISC-V64 平台。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Docs] 文件系统优化历程</title>
      <link>https://bitethedisk.github.io/post/fs-optimization/</link>
      <pubDate>Thu, 17 Aug 2023 17:28:13 +0800</pubDate>
      
      <guid>https://bitethedisk.github.io/post/fs-optimization/</guid>
      <description>文件系统优化历程 我们在 FAT32 设计上，采用了 rCore-Tutorial easy-fs 相同的松耦合模块化设计思路，与底层设备驱动之间通过抽象接口 BlockDevice 来连接，避免了与设备驱动的绑定。FAT32 库通过 Rust 提供的 alloc crate 来隔离了操作系统内核的内存管理，避免了</description>
    </item>
    
    <item>
      <title>动态链接</title>
      <link>https://bitethedisk.github.io/post/dynamic/</link>
      <pubDate>Tue, 01 Aug 2023 23:11:47 +0800</pubDate>
      
      <guid>https://bitethedisk.github.io/post/dynamic/</guid>
      <description>&lt;p&gt;实现动态连接十分简单，只需要在加载elf文件时判断是否存在interpret段，如果存在就加载对应的动态连接器，
将动态连接器内容映射进内存并将程序入口设置为动态连接器的入口。接下来动态连接器会完成剩下的连接工作。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 和 C 的交互</title>
      <link>https://bitethedisk.github.io/post/rust-and-c/</link>
      <pubDate>Tue, 01 Aug 2023 21:31:27 +0800</pubDate>
      
      <guid>https://bitethedisk.github.io/post/rust-and-c/</guid>
      <description>&lt;p&gt;在 Rust 中，字符串是一个胖指针，包括具有所有权的 &lt;code&gt;String&lt;/code&gt; 以及 &lt;code&gt;&amp;amp;&#39;a str&lt;/code&gt;，并且为 utf-8 编码&lt;/p&gt;
&lt;p&gt;而在 C 中，字符串只是一个单纯的指针，以有符号的 &lt;code&gt;i8&lt;/code&gt; 为单元，以 &lt;code&gt;\0&lt;/code&gt;
作为结尾，长度不包括结尾 &amp;lsquo;\0&amp;rsquo;&lt;/p&gt;
&lt;p&gt;在使用 Rust 编写 initrpoc 和
系统调用的时候，由于测例所要求的的接口所使用的的字符串相关参数均为 C
标准，所以我们需要将 Rust 和 C 之间的字符串进行转换&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[全国赛I] 信号处理</title>
      <link>https://bitethedisk.github.io/post/signal/</link>
      <pubDate>Tue, 01 Aug 2023 21:17:37 +0800</pubDate>
      
      <guid>https://bitethedisk.github.io/post/signal/</guid>
      <description>&lt;p&gt;在目前的实现中信号总共有63种，1-31为非实时信号，34-63是实时信号。32和33为未定义信号。
信号是每个进程独有的，除此之外每个进程还有信号掩码。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[全国赛I] busybox 预加载</title>
      <link>https://bitethedisk.github.io/post/busybox-pre-init/</link>
      <pubDate>Tue, 01 Aug 2023 18:37:11 +0800</pubDate>
      
      <guid>https://bitethedisk.github.io/post/busybox-pre-init/</guid>
      <description>&lt;p&gt;由于大部分测试需要使用 busybox，为了避免多次解析 elf、从零创建地址空间等问题，我们采用了类似于加载initproc的方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[全国赛I] 进程/线程调度</title>
      <link>https://bitethedisk.github.io/post/scheduling/</link>
      <pubDate>Tue, 01 Aug 2023 18:37:11 +0800</pubDate>
      
      <guid>https://bitethedisk.github.io/post/scheduling/</guid>
      <description>&lt;p&gt;在我们的内核中，我们使用 TASKMANAGER 管理分别处于就绪态，阻塞态的进程，包括因为调用 nanosleep 而休眠的进程。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[全国赛I] 进程管理-进程与线程</title>
      <link>https://bitethedisk.github.io/post/process-thread/</link>
      <pubDate>Tue, 01 Aug 2023 18:37:11 +0800</pubDate>
      
      <guid>https://bitethedisk.github.io/post/process-thread/</guid>
      <description>&lt;h2 id=&#34;tcb-与-fork-的更改&#34;&gt;TCB 与 fork 的更改&lt;/h2&gt;
&lt;p&gt;相较于初赛，完善了 clone 系统调用。初赛时由于要求测试样例要求比较低，在实现 clone 系统调用时并未完全利用用户传递的参数。我们根据 Linux
manual page 中的要求，完善了内核的 fork 以及 TaskControlBlock 结构。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>适配 OpenSBI</title>
      <link>https://bitethedisk.github.io/post/opensbi-getchar/</link>
      <pubDate>Wed, 12 Jul 2023 17:17:35 +0800</pubDate>
      
      <guid>https://bitethedisk.github.io/post/opensbi-getchar/</guid>
      <description>一开始</description>
    </item>
    
    <item>
      <title>Rust Heap and C</title>
      <link>https://bitethedisk.github.io/post/rust-heap-and-c/</link>
      <pubDate>Fri, 07 Jul 2023 22:35:05 +0800</pubDate>
      
      <guid>https://bitethedisk.github.io/post/rust-heap-and-c/</guid>
      <description>Rust 和 C 交互的时候需要注意 Rust 的堆，当从 Rust 程序 fork 出一个进程 来执行 C 程序的时候，C 是不能识别 Rust 的堆的(包括其堆管理器这些)，所以当 使用 C 程序去访问 fork 后的 Rust 堆上的对象，或者传递相关堆上对象的时候可能 会产生致命</description>
    </item>
    
    <item>
      <title>[全国赛I] 项目结构(rust-workspace不能使用)</title>
      <link>https://bitethedisk.github.io/post/project-structure/</link>
      <pubDate>Fri, 30 Jun 2023 19:29:29 +0800</pubDate>
      
      <guid>https://bitethedisk.github.io/post/project-structure/</guid>
      <description>&lt;p&gt;随着开发的进行，我们需要的适配和封装的数据结构越来越多，其中大部分与我们的内核本体关系并没有那么紧密，
所以我们将这部分结构，如用于的引导程序、FAT32、Linux 相关数据结构放在了项目根目录中的 &lt;code&gt;crates&lt;/code&gt; 里&lt;/p&gt;
&lt;p&gt;Rust 本身是支持多个 &lt;code&gt;crates&lt;/code&gt; 构成的一个 &lt;code&gt;workspace&lt;/code&gt;，这些 &lt;code&gt;crates&lt;/code&gt; 直接可以相互引用，但是由于我们使用
了 &lt;code&gt;.cargo/config.toml&lt;/code&gt; 来配置 rustc，所以 &lt;code&gt;workspace&lt;/code&gt; 并不能为我们所有 (因为目前 &lt;code&gt;workspace&lt;/code&gt;
不支持在 &lt;code&gt;workspace&lt;/code&gt; 中读取 &lt;code&gt;.cargo/config.toml&lt;/code&gt;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[区域赛] 有关 BTD 的 Makefile</title>
      <link>https://bitethedisk.github.io/post/about-makefile/</link>
      <pubDate>Fri, 30 Jun 2023 18:37:11 +0800</pubDate>
      
      <guid>https://bitethedisk.github.io/post/about-makefile/</guid>
      <description>&lt;p&gt;项目提供了一系列的 Makefile 来简化开发流程.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何调试 BTD-OS</title>
      <link>https://bitethedisk.github.io/post/how-to-debug-the-kernel/</link>
      <pubDate>Fri, 30 Jun 2023 18:34:54 +0800</pubDate>
      
      <guid>https://bitethedisk.github.io/post/how-to-debug-the-kernel/</guid>
      <description>&lt;p&gt;在 BTD 的开发中经常会遇到 debug 的需求，BTD 提供了一个方便的调试流程，只需启动两个 shell 即可
开始调试&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[已解决] 内核在执行用户程序时随机卡死</title>
      <link>https://bitethedisk.github.io/post/random-stuck/</link>
      <pubDate>Thu, 29 Jun 2023 21:42:09 +0800</pubDate>
      
      <guid>https://bitethedisk.github.io/post/random-stuck/</guid>
      <description>&lt;p&gt;内核在运行的时候总是会不知何时卡死，底层原因是持续触发时钟中断&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于</title>
      <link>https://bitethedisk.github.io/about/</link>
      <pubDate>Sat, 11 Apr 2020 19:15:32 +0800</pubDate>
      
      <guid>https://bitethedisk.github.io/about/</guid>
      <description>BTD-OS 是使用 Rust 语言开发的宏内核操作系统，基于 riscv64 架构，可运行与 qemu/fu740 平台， BTD-OS 实现了中断与异常处理、进程管理、内存管理以及文件系统等操作系统基本模块。 BTD-OS 的总体目标是设计一款简洁小巧、结构清晰、基本功能完善、可拓展</description>
    </item>
    
  </channel>
</rss>

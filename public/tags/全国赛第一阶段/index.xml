<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>全国赛第一阶段 on BiteTheDisk 小站</title>
    <link>https://bitethedisk.github.io/tags/%E5%85%A8%E5%9B%BD%E8%B5%9B%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/</link>
    <description>Recent content in 全国赛第一阶段 on BiteTheDisk 小站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 01 Aug 2023 21:31:27 +0800</lastBuildDate><atom:link href="https://bitethedisk.github.io/tags/%E5%85%A8%E5%9B%BD%E8%B5%9B%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rust 和 C 的交互</title>
      <link>https://bitethedisk.github.io/post/rust-and-c/</link>
      <pubDate>Tue, 01 Aug 2023 21:31:27 +0800</pubDate>
      
      <guid>https://bitethedisk.github.io/post/rust-and-c/</guid>
      <description></description>
    </item>
    
    <item>
      <title>[全国赛I] 信号处理</title>
      <link>https://bitethedisk.github.io/post/signal/</link>
      <pubDate>Tue, 01 Aug 2023 21:17:37 +0800</pubDate>
      
      <guid>https://bitethedisk.github.io/post/signal/</guid>
      <description>&lt;p&gt;在目前的实现中信号总共有63种，1-31为非实时信号，34-63是实时信号。32和33为未定义信号。
信号是每个进程独有的，除此之外每个进程还有信号掩码。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[全国赛I] busybox 预加载</title>
      <link>https://bitethedisk.github.io/post/busybox-pre-init/</link>
      <pubDate>Tue, 01 Aug 2023 18:37:11 +0800</pubDate>
      
      <guid>https://bitethedisk.github.io/post/busybox-pre-init/</guid>
      <description>&lt;p&gt;由于大部分测试需要使用 busybox，为了避免多次解析 elf、从零创建地址空间等问题，我们采用了类似于加载initproc的方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[全国赛I] 进程/线程调度</title>
      <link>https://bitethedisk.github.io/post/scheduling/</link>
      <pubDate>Tue, 01 Aug 2023 18:37:11 +0800</pubDate>
      
      <guid>https://bitethedisk.github.io/post/scheduling/</guid>
      <description>在我们的内核中，我们使用 TASKMANAGER 管理分别处于就绪态，阻塞态的进程，包括因为调用 nanosleep 而休眠的进程。 // kernel/src/task/manager.rs // 负责管理待调度的进程对象 pub struct TaskManager { ready_queue: VecDeque&amp;lt;Arc&amp;lt;TaskControlBlock&amp;gt;&amp;gt;, waiting_queue: VecDeque&amp;lt;Arc&amp;lt;TaskControlBlock&amp;gt;&amp;gt;, hq: BinaryHeap&amp;lt;HangingTask&amp;gt;, } // 用于管理 sleep 进程 pub struct HangingTask { wake_up_time: usize, // ns inner: Arc&amp;lt;TaskControlBlock&amp;gt;, } // 用于处理子线程的资源</description>
    </item>
    
    <item>
      <title>[全国赛I] 进程管理-进程与线程</title>
      <link>https://bitethedisk.github.io/post/process-thread/</link>
      <pubDate>Tue, 01 Aug 2023 18:37:11 +0800</pubDate>
      
      <guid>https://bitethedisk.github.io/post/process-thread/</guid>
      <description>TCB 与 fork 的更改 相较于初赛，完善了 clone 系统调用。初赛时由于要求测试样例要求比较低，在实现 clone 系统调用时并未完全利用用户传递的参数。我们根据 Linux manual page 中的要求，完善了内核的 fork 以及 TaskControlBlock 结构。 // kernel/task/task.rs pub struct TaskControlBlock { ... pub sigactions: Arc&amp;lt;RwLock&amp;lt;[SigAction; MAX_SIGNUM as usize]&amp;gt;&amp;gt;, pub</description>
    </item>
    
    <item>
      <title>[全国赛I] 项目结构(rust-workspace不能使用)</title>
      <link>https://bitethedisk.github.io/post/project-structure/</link>
      <pubDate>Fri, 30 Jun 2023 19:29:29 +0800</pubDate>
      
      <guid>https://bitethedisk.github.io/post/project-structure/</guid>
      <description>&lt;p&gt;随着开发的进行，我们需要的适配和封装的数据结构越来越多，其中大部分与我们的内核本体关系并没有那么紧密，
所以我们将这部分结构，如用于的引导程序、FAT32、Linux 相关数据结构放在了项目根目录中的 &lt;code&gt;crates&lt;/code&gt; 里&lt;/p&gt;
&lt;p&gt;Rust 本身是支持多个 &lt;code&gt;crates&lt;/code&gt; 构成的一个 &lt;code&gt;workspace&lt;/code&gt;，这些 &lt;code&gt;crates&lt;/code&gt; 直接可以相互引用，但是由于我们使用
了 &lt;code&gt;.cargo/config.toml&lt;/code&gt; 来配置 rustc，所以 &lt;code&gt;workspace&lt;/code&gt; 并不能为我们所有 (因为目前 &lt;code&gt;workspace&lt;/code&gt;
不支持在 &lt;code&gt;workspace&lt;/code&gt; 中读取 &lt;code&gt;.cargo/config.toml&lt;/code&gt;)&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

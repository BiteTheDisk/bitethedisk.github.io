<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>优化 on BiteTheDisk 小站</title>
    <link>https://bitethedisk.github.io/tags/%E4%BC%98%E5%8C%96/</link>
    <description>Recent content in 优化 on BiteTheDisk 小站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 17 Aug 2023 17:28:13 +0800</lastBuildDate><atom:link href="https://bitethedisk.github.io/tags/%E4%BC%98%E5%8C%96/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>文件系统优化历程</title>
      <link>https://bitethedisk.github.io/post/fs-optimization/</link>
      <pubDate>Thu, 17 Aug 2023 17:28:13 +0800</pubDate>
      
      <guid>https://bitethedisk.github.io/post/fs-optimization/</guid>
      <description>&lt;h1 id=&#34;文件系统优化历程&#34;&gt;文件系统优化历程&lt;/h1&gt;
&lt;p&gt;我们在 FAT32 设计上，采用了 rCore-Tutorial easy-fs 相同的松耦合模块化设计思路，与底层设备驱动之间通过抽象接口
&lt;code&gt;BlockDevice&lt;/code&gt; 来连接，避免了与设备驱动的绑定。FAT32 库通过 Rust 提供的 alloc crate
来隔离了操作系统内核的内存管理，避免了直接调用内存管理的内核函数。
同时在设计中避免了直接访问进程相关的数据和函数，从而隔离了操作系统内核的进程管理。&lt;/p&gt;
&lt;p&gt;虽然我们在内核中给出了虚拟文件的抽象 File Trait，但是由于只完成的 FAT32 文件系统，内核中不存在虚拟文件系统这一抽象，也没有 Inode
层面的缓存，内核中的文件实际上将 FAT32 提供的 VirtFile 进一步封装成 KFile，这导致每次写入数据都会同步到磁盘，此时 BlockCache
缓存块的作用微乎其微。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
